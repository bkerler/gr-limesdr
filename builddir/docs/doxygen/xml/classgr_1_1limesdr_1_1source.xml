<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classgr_1_1limesdr_1_1source" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>gr::limesdr::source</compoundname>
    <basecompoundref prot="public" virt="virtual">gr::block</basecompoundref>
    <derivedcompoundref refid="classgr_1_1limesdr_1_1source__impl" prot="public" virt="non-virtual">gr::limesdr::source_impl</derivedcompoundref>
    <includes refid="source_8h" local="no">source.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classgr_1_1limesdr_1_1source_1acd29e40524cea5fa2ec7c84464fc2054" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classgr_1_1limesdr_1_1source" kindref="compound">source</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt;source&gt; gr::limesdr::source::sptr</definition>
        <argsstring></argsstring>
        <name>sptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hydra/gnuradio/src/gr-limesdr/include/gnuradio/limesdr/source.h" line="31" column="29" bodyfile="/home/hydra/gnuradio/src/gr-limesdr/include/gnuradio/limesdr/source.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classgr_1_1limesdr_1_1source_1ad7b46fccc48afd9145f40f915fe1144a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgr_1_1limesdr_1_1source_1acd29e40524cea5fa2ec7c84464fc2054" kindref="member">sptr</ref></type>
        <definition>static sptr gr::limesdr::source::make</definition>
        <argsstring>(std::string serial, int channel_mode, const std::string &amp;filename)</argsstring>
        <name>make</name>
        <param>
          <type>std::string</type>
          <declname>serial</declname>
        </param>
        <param>
          <type>int</type>
          <declname>channel_mode</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Return a shared_ptr to a new instance of source. </para>
        </briefdescription>
        <detaileddescription>
<para>To avoid accidental use of raw pointers, source&apos;s constructor is private. <ref refid="classgr_1_1limesdr_1_1source_1ad7b46fccc48afd9145f40f915fe1144a" kindref="member">limesdr::source::make</ref> is the public interface for creating new instances.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>serial</parametername>
</parameternamelist>
<parameterdescription>
<para>Device serial number. Cannot be left blank.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel and mode selection A(1), B(2), (A+B)MIMO(3).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>Path to file if file switch is turned on.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a new limesdr source block object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hydra/gnuradio/src/gr-limesdr/include/gnuradio/limesdr/source.h" line="48" column="17"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgr_1_1limesdr_1_1source_1adba834bd9e792f7436528cbdb77d7697" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double gr::limesdr::source::set_center_freq</definition>
        <argsstring>(double freq, size_t chan=0)=0</argsstring>
        <name>set_center_freq</name>
        <reimplementedby refid="classgr_1_1limesdr_1_1source__impl_1a0faa1a284f11c6668299f51b4282e86d">set_center_freq</reimplementedby>
        <param>
          <type>double</type>
          <declname>freq</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>chan</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set center frequency</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>freq</parametername>
</parameternamelist>
<parameterdescription>
<para>Frequency to set in Hz</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chan</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel (not used)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>actual center frequency in Hz </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hydra/gnuradio/src/gr-limesdr/include/gnuradio/limesdr/source.h" line="59" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1limesdr_1_1source_1af1907d82222150d77cd594a3b8249d2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void gr::limesdr::source::set_antenna</definition>
        <argsstring>(int antenna, int channel=0)=0</argsstring>
        <name>set_antenna</name>
        <reimplementedby refid="classgr_1_1limesdr_1_1source__impl_1a3bd6273b8795544fba229014cb910040">set_antenna</reimplementedby>
        <param>
          <type>int</type>
          <declname>antenna</declname>
        </param>
        <param>
          <type>int</type>
          <declname>channel</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set which antenna is used</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>antenna</parametername>
</parameternamelist>
<parameterdescription>
<para>Antenna to set: None(0), LNAH(1), LNAL(2), LNAW(3), AUTO(255)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel selection: A(LMS_CH_0),B(LMS_CH_1). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hydra/gnuradio/src/gr-limesdr/include/gnuradio/limesdr/source.h" line="68" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1limesdr_1_1source_1a4fe10596978902a51d29a2a6b43e95dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void gr::limesdr::source::set_nco</definition>
        <argsstring>(float nco_freq, int channel)=0</argsstring>
        <name>set_nco</name>
        <reimplementedby refid="classgr_1_1limesdr_1_1source__impl_1a16a65efb2432da20a6305a2f65db9347">set_nco</reimplementedby>
        <param>
          <type>float</type>
          <declname>nco_freq</declname>
        </param>
        <param>
          <type>int</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set NCO (numerically controlled oscillator). By selecting NCO frequency configure NCO. When NCO frequency is 0, NCO is off.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nco_freq</parametername>
</parameternamelist>
<parameterdescription>
<para>NCO frequency in Hz.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hydra/gnuradio/src/gr-limesdr/include/gnuradio/limesdr/source.h" line="78" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1limesdr_1_1source_1ab1ac1b35e6dc05d8da0d36b3a5cb9e31" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double gr::limesdr::source::set_bandwidth</definition>
        <argsstring>(double analog_bandw, int channel=0)=0</argsstring>
        <name>set_bandwidth</name>
        <reimplementedby refid="classgr_1_1limesdr_1_1source__impl_1a409e68c0e1b907b49a43747aa33c77d6">set_bandwidth</reimplementedby>
        <param>
          <type>double</type>
          <declname>analog_bandw</declname>
        </param>
        <param>
          <type>int</type>
          <declname>channel</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set analog filters.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>analog_bandw</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel filter bandwidth in Hz.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel selection: A(LMS_CH_0),B(LMS_CH_1).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>actual filter bandwidth in Hz </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hydra/gnuradio/src/gr-limesdr/include/gnuradio/limesdr/source.h" line="88" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1limesdr_1_1source_1a6042356436bccb5a8b95bd93c026ad9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void gr::limesdr::source::set_digital_filter</definition>
        <argsstring>(double digital_bandw, int channel)=0</argsstring>
        <name>set_digital_filter</name>
        <reimplementedby refid="classgr_1_1limesdr_1_1source__impl_1a364dc23ff74fdeceb2eb232d2b5a486d">set_digital_filter</reimplementedby>
        <param>
          <type>double</type>
          <declname>digital_bandw</declname>
        </param>
        <param>
          <type>int</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set digital filters (GFIR).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>digital_bandw</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel filter bandwidth in Hz.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel selection: A(LMS_CH_0),B(LMS_CH_1). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hydra/gnuradio/src/gr-limesdr/include/gnuradio/limesdr/source.h" line="96" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1limesdr_1_1source_1a22d09b2a21f0fc58f444ecbc5f7c9622" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>unsigned</type>
        <definition>virtual unsigned gr::limesdr::source::set_gain</definition>
        <argsstring>(unsigned gain_dB, int channel=0)=0</argsstring>
        <name>set_gain</name>
        <reimplementedby refid="classgr_1_1limesdr_1_1source__impl_1a6678917ec79f432fd398b8e6d54d20d0">set_gain</reimplementedby>
        <param>
          <type>unsigned</type>
          <declname>gain_dB</declname>
        </param>
        <param>
          <type>int</type>
          <declname>channel</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the combined gain value in dB</para>
<para><simplesect kind="note"><para>actual gain depends on LO frequency and analog LPF configuration and resulting output signal level may be different when those values are changed</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gain_dB</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired gain: [0,73] dB</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel selection: A(LMS_CH_0),B(LMS_CH_1).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>actual gain in dB </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hydra/gnuradio/src/gr-limesdr/include/gnuradio/limesdr/source.h" line="109" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1limesdr_1_1source_1af4faa5e9d62d527db40bd9171d229825" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double gr::limesdr::source::set_sample_rate</definition>
        <argsstring>(double rate)=0</argsstring>
        <name>set_sample_rate</name>
        <reimplementedby refid="classgr_1_1limesdr_1_1source__impl_1a0b5704a06ef83b5b1d446f2b3f40c61c">set_sample_rate</reimplementedby>
        <param>
          <type>double</type>
          <declname>rate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the same sample rate for both channels.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rate</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample rate in S/s.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>actual sample rate in S/s </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hydra/gnuradio/src/gr-limesdr/include/gnuradio/limesdr/source.h" line="117" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1limesdr_1_1source_1af9b247b22ddabe66e01927ca8e66ae3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void gr::limesdr::source::set_oversampling</definition>
        <argsstring>(int oversample)=0</argsstring>
        <name>set_oversampling</name>
        <reimplementedby refid="classgr_1_1limesdr_1_1source__impl_1a58d5481996ae1c17c2dfd9be38361914">set_oversampling</reimplementedby>
        <param>
          <type>int</type>
          <declname>oversample</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set oversampling for both channels.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>oversample</parametername>
</parameternamelist>
<parameterdescription>
<para>Oversampling value (0 (default),1,2,4,8,16,32). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hydra/gnuradio/src/gr-limesdr/include/gnuradio/limesdr/source.h" line="123" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1limesdr_1_1source_1aa3b7226a6d39fb9118d4da0425e4029a" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void gr::limesdr::source::calibrate</definition>
        <argsstring>(double bandw, int channel=0)=0</argsstring>
        <name>calibrate</name>
        <reimplementedby refid="classgr_1_1limesdr_1_1source__impl_1a4584770cfe93c08ec0f378cb5f630c86">calibrate</reimplementedby>
        <param>
          <type>double</type>
          <declname>bandw</declname>
        </param>
        <param>
          <type>int</type>
          <declname>channel</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform device calibration.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bandw</parametername>
</parameternamelist>
<parameterdescription>
<para>Set calibration bandwidth in Hz.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel selection: A(LMS_CH_0),B(LMS_CH_1). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hydra/gnuradio/src/gr-limesdr/include/gnuradio/limesdr/source.h" line="131" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1limesdr_1_1source_1a781e3bb153a6da5d43bbb454a59e730a" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void gr::limesdr::source::set_buffer_size</definition>
        <argsstring>(uint32_t size)=0</argsstring>
        <name>set_buffer_size</name>
        <reimplementedby refid="classgr_1_1limesdr_1_1source__impl_1a5d6347f8713ba77cd9f3b3868d2b0d86">set_buffer_size</reimplementedby>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set stream buffer size</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>FIFO buffer size in samples </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hydra/gnuradio/src/gr-limesdr/include/gnuradio/limesdr/source.h" line="137" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1limesdr_1_1source_1a842b2eaed035a66d0840163c67828049" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void gr::limesdr::source::set_tcxo_dac</definition>
        <argsstring>(uint16_t dacVal=125)=0</argsstring>
        <name>set_tcxo_dac</name>
        <reimplementedby refid="classgr_1_1limesdr_1_1source__impl_1a7a839ff58c807cedc1ccd084c2d93088">set_tcxo_dac</reimplementedby>
        <param>
          <type>uint16_t</type>
          <declname>dacVal</declname>
          <defval>125</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set TCXO DAC. <simplesect kind="note"><para>Care must be taken as this parameter is returned to default value only after power off. </para>
</simplesect>
<simplesect kind="note"><para>LimeSDR-Mini default value is 180 range is [0,255] LimeSDR-USB default value is 125 range is [0,255] LimeSDR-PCIe default value is 134 range is [0,255] LimeNET-Micro default value is 30714 range is [0,65535]</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dacVal</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC value (0-65535) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hydra/gnuradio/src/gr-limesdr/include/gnuradio/limesdr/source.h" line="148" column="19"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>gr::limesdr::source</label>
        <link refid="classgr_1_1limesdr_1_1source"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>gr::limesdr::source_impl</label>
        <link refid="classgr_1_1limesdr_1_1source__impl"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>gr::block</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>gr::limesdr::source</label>
        <link refid="classgr_1_1limesdr_1_1source"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>gr::block</label>
      </node>
    </collaborationgraph>
    <location file="/home/hydra/gnuradio/src/gr-limesdr/include/gnuradio/limesdr/source.h" line="29" column="1" bodyfile="/home/hydra/gnuradio/src/gr-limesdr/include/gnuradio/limesdr/source.h" bodystart="29" bodyend="149"/>
    <listofallmembers>
      <member refid="classgr_1_1limesdr_1_1source_1aa3b7226a6d39fb9118d4da0425e4029a" prot="public" virt="pure-virtual"><scope>gr::limesdr::source</scope><name>calibrate</name></member>
      <member refid="classgr_1_1limesdr_1_1source_1ad7b46fccc48afd9145f40f915fe1144a" prot="public" virt="non-virtual"><scope>gr::limesdr::source</scope><name>make</name></member>
      <member refid="classgr_1_1limesdr_1_1source_1af1907d82222150d77cd594a3b8249d2c" prot="public" virt="pure-virtual"><scope>gr::limesdr::source</scope><name>set_antenna</name></member>
      <member refid="classgr_1_1limesdr_1_1source_1ab1ac1b35e6dc05d8da0d36b3a5cb9e31" prot="public" virt="pure-virtual"><scope>gr::limesdr::source</scope><name>set_bandwidth</name></member>
      <member refid="classgr_1_1limesdr_1_1source_1a781e3bb153a6da5d43bbb454a59e730a" prot="public" virt="pure-virtual"><scope>gr::limesdr::source</scope><name>set_buffer_size</name></member>
      <member refid="classgr_1_1limesdr_1_1source_1adba834bd9e792f7436528cbdb77d7697" prot="public" virt="pure-virtual"><scope>gr::limesdr::source</scope><name>set_center_freq</name></member>
      <member refid="classgr_1_1limesdr_1_1source_1a6042356436bccb5a8b95bd93c026ad9f" prot="public" virt="pure-virtual"><scope>gr::limesdr::source</scope><name>set_digital_filter</name></member>
      <member refid="classgr_1_1limesdr_1_1source_1a22d09b2a21f0fc58f444ecbc5f7c9622" prot="public" virt="pure-virtual"><scope>gr::limesdr::source</scope><name>set_gain</name></member>
      <member refid="classgr_1_1limesdr_1_1source_1a4fe10596978902a51d29a2a6b43e95dc" prot="public" virt="pure-virtual"><scope>gr::limesdr::source</scope><name>set_nco</name></member>
      <member refid="classgr_1_1limesdr_1_1source_1af9b247b22ddabe66e01927ca8e66ae3a" prot="public" virt="pure-virtual"><scope>gr::limesdr::source</scope><name>set_oversampling</name></member>
      <member refid="classgr_1_1limesdr_1_1source_1af4faa5e9d62d527db40bd9171d229825" prot="public" virt="pure-virtual"><scope>gr::limesdr::source</scope><name>set_sample_rate</name></member>
      <member refid="classgr_1_1limesdr_1_1source_1a842b2eaed035a66d0840163c67828049" prot="public" virt="pure-virtual"><scope>gr::limesdr::source</scope><name>set_tcxo_dac</name></member>
      <member refid="classgr_1_1limesdr_1_1source_1acd29e40524cea5fa2ec7c84464fc2054" prot="public" virt="non-virtual"><scope>gr::limesdr::source</scope><name>sptr</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
